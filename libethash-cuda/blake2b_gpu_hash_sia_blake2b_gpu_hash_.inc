 __global__ __launch_bounds__(128, 8) void blake2b_gpu_hash_sia_blake2b_gpu_hash_fused_kernel_vfuse_lb_idx_0(const uint32_t threads0, const uint32_t startNonce1, uint32_t *resNonce2, const uint2 target23, uint32_t iter4, const uint32_t threads9, const uint32_t startNonce10, uint32_t *resNonce11, const uint2 target212, uint32_t iter13)
 {
if (((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=0 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 128)){
    unsigned int blockDim_x_0;
    blockDim_x_0 = 128;
    unsigned int threadIdx_x_0;
    threadIdx_x_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) % 128;
    unsigned int blockDim_y_0;
    blockDim_y_0 = 1;
    unsigned int threadIdx_y_0;
    threadIdx_y_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128 % 1;
    unsigned int blockDim_z_0;
    blockDim_z_0 = 1;
    unsigned int threadIdx_z_0;
    threadIdx_z_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128;
    for (int i = 0; i < iter4; i++) {
        uint32_t nonce5;
        nonce5 = (blockDim_x_0 * blockIdx.x + threadIdx_x_0) * iter4 + i + startNonce1;
        uint64_t m6[16];
        m6[0] = d_blake_data[0];
        m6[1] = d_blake_data[1];
        m6[2] = d_blake_data[2];
        m6[3] = d_blake_data[3];
        m6[4] = d_blake_data[4];
        m6[5] = d_blake_data[5];
        m6[6] = d_blake_data[6];
        m6[7] = d_blake_data[7];
        m6[8] = d_blake_data[8];
        ((uint32_t *)m6)[18] = *((uint32_t *)(&d_blake_data[9]));
        ((uint32_t *)m6)[19] = nonce5;
        m6[10] = m6[11] = 0;
        m6[12] = m6[13] = 0;
        m6[14] = m6[15] = 0;
        uint64_t v7[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
        G_b(0, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(0, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(0, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(0, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(0, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(0, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(0, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(0, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(1, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(1, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(1, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(1, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(1, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(1, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(1, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(1, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(2, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(2, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(2, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(2, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(2, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(2, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(2, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(2, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(3, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(3, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(3, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(3, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(3, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(3, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(3, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(3, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(4, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(4, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(4, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(4, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(4, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(4, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(4, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(4, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(5, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(5, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(5, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(5, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(5, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(5, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(5, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(5, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(6, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(6, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(6, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(6, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(6, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(6, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(6, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(6, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(7, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(7, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(7, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(7, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(7, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(7, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(7, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(7, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(8, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(8, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(8, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(8, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(8, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(8, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(8, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(8, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(9, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(9, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(9, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(9, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(9, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(9, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(9, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(9, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(10, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(10, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(10, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(10, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(10, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(10, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(10, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(10, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(11, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(11, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(11, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(11, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(11, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(11, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(11, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(11, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        uint2 last8;
        last8 = vectorize(v7[3] ^ v7[11] ^ 11912009170470909681UL);
        if (last8.y <= target23.y && last8.x <= target23.x) {
            resNonce2[1] = resNonce2[0];
            resNonce2[0] = nonce5;
        }
    }
}
if (((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=0 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 128)){
    unsigned int blockDim_x_1;
    blockDim_x_1 = 128;
    unsigned int threadIdx_x_1;
    threadIdx_x_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) % 128;
    unsigned int blockDim_y_1;
    blockDim_y_1 = 1;
    unsigned int threadIdx_y_1;
    threadIdx_y_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128 % 1;
    unsigned int blockDim_z_1;
    blockDim_z_1 = 1;
    unsigned int threadIdx_z_1;
    threadIdx_z_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128;
    for (int i = 0; i < iter13; i++) {
        uint32_t nonce14;
        nonce14 = (blockDim_x_1 * blockIdx.x + threadIdx_x_1) * iter13 + i + startNonce10;
        static uint64_t s_target15 __attribute__((shared));
        if (!threadIdx_x_1)
            s_target15 = devectorize(target212);
        uint64_t m16[16];
        m16[0] = d_data2[0];
        m16[1] = d_data2[1];
        m16[2] = d_data2[2];
        m16[3] = d_data2[3];
        m16[4] = d_data2[4] | nonce14;
        m16[5] = d_data2[5];
        m16[6] = d_data2[6];
        m16[7] = d_data2[7];
        m16[8] = d_data2[8];
        m16[9] = d_data2[9];
        m16[10] = m16[11] = 0;
        m16[12] = m16[13] = m16[14] = m16[15] = 0;
        uint64_t v17[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
        G(0, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(0, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(0, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(0, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(0, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(0, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(0, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(0, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(1, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(1, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(1, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(1, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(1, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(1, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(1, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(1, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(2, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(2, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(2, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(2, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(2, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(2, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(2, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(2, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(3, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(3, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(3, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(3, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(3, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(3, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(3, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(3, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(4, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(4, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(4, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(4, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(4, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(4, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(4, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(4, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(5, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(5, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(5, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(5, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(5, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(5, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(5, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(5, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(6, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(6, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(6, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(6, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(6, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(6, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(6, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(6, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(7, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(7, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(7, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(7, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(7, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(7, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(7, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(7, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(8, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(8, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(8, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(8, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(8, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(8, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(8, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(8, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(9, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(9, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(9, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(9, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(9, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(9, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(9, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(9, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(10, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(10, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(10, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(10, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(10, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(10, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(10, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(10, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(11, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(11, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(11, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(11, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(11, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(11, 5, v17[1], v17[6], v17[11], v17[12], m16);
        H(11, 6, v17[2], v17[7], v17[8], v17[13], m16);
        ;
        uint64_t h6418;
        h6418 = cuda_swab64(7640891576939301160L ^ v17[0] ^ v17[8]);
        if (h6418 <= s_target15) {
            resNonce11[1] = resNonce11[0];
            resNonce11[0] = nonce14;
            s_target15 = h6418;
        }
    }
}
}
 __global__ __launch_bounds__(128, 0) void blake2b_gpu_hash_sia_blake2b_gpu_hash_fused_kernel_vfuse_idx_0(const uint32_t threads0, const uint32_t startNonce1, uint32_t *resNonce2, const uint2 target23, uint32_t iter4, const uint32_t threads9, const uint32_t startNonce10, uint32_t *resNonce11, const uint2 target212, uint32_t iter13)
 {
if (((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=0 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 128)){
    unsigned int blockDim_x_0;
    blockDim_x_0 = 128;
    unsigned int threadIdx_x_0;
    threadIdx_x_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) % 128;
    unsigned int blockDim_y_0;
    blockDim_y_0 = 1;
    unsigned int threadIdx_y_0;
    threadIdx_y_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128 % 1;
    unsigned int blockDim_z_0;
    blockDim_z_0 = 1;
    unsigned int threadIdx_z_0;
    threadIdx_z_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128;
    for (int i = 0; i < iter4; i++) {
        uint32_t nonce5;
        nonce5 = (blockDim_x_0 * blockIdx.x + threadIdx_x_0) * iter4 + i + startNonce1;
        uint64_t m6[16];
        m6[0] = d_blake_data[0];
        m6[1] = d_blake_data[1];
        m6[2] = d_blake_data[2];
        m6[3] = d_blake_data[3];
        m6[4] = d_blake_data[4];
        m6[5] = d_blake_data[5];
        m6[6] = d_blake_data[6];
        m6[7] = d_blake_data[7];
        m6[8] = d_blake_data[8];
        ((uint32_t *)m6)[18] = *((uint32_t *)(&d_blake_data[9]));
        ((uint32_t *)m6)[19] = nonce5;
        m6[10] = m6[11] = 0;
        m6[12] = m6[13] = 0;
        m6[14] = m6[15] = 0;
        uint64_t v7[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
        G_b(0, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(0, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(0, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(0, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(0, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(0, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(0, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(0, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(1, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(1, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(1, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(1, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(1, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(1, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(1, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(1, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(2, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(2, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(2, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(2, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(2, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(2, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(2, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(2, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(3, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(3, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(3, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(3, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(3, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(3, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(3, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(3, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(4, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(4, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(4, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(4, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(4, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(4, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(4, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(4, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(5, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(5, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(5, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(5, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(5, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(5, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(5, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(5, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(6, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(6, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(6, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(6, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(6, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(6, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(6, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(6, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(7, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(7, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(7, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(7, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(7, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(7, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(7, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(7, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(8, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(8, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(8, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(8, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(8, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(8, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(8, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(8, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(9, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(9, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(9, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(9, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(9, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(9, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(9, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(9, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(10, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(10, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(10, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(10, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(10, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(10, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(10, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(10, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        G_b(11, 0, v7[0], v7[4], v7[8], v7[12], m6);
        G_b(11, 1, v7[1], v7[5], v7[9], v7[13], m6);
        G_b(11, 2, v7[2], v7[6], v7[10], v7[14], m6);
        G_b(11, 3, v7[3], v7[7], v7[11], v7[15], m6);
        G_b(11, 4, v7[0], v7[5], v7[10], v7[15], m6);
        G_b(11, 5, v7[1], v7[6], v7[11], v7[12], m6);
        G_b(11, 6, v7[2], v7[7], v7[8], v7[13], m6);
        G_b(11, 7, v7[3], v7[4], v7[9], v7[14], m6);
        ;
        uint2 last8;
        last8 = vectorize(v7[3] ^ v7[11] ^ 11912009170470909681UL);
        if (last8.y <= target23.y && last8.x <= target23.x) {
            resNonce2[1] = resNonce2[0];
            resNonce2[0] = nonce5;
        }
    }
}
if (((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=0 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 128)){
    unsigned int blockDim_x_1;
    blockDim_x_1 = 128;
    unsigned int threadIdx_x_1;
    threadIdx_x_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) % 128;
    unsigned int blockDim_y_1;
    blockDim_y_1 = 1;
    unsigned int threadIdx_y_1;
    threadIdx_y_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128 % 1;
    unsigned int blockDim_z_1;
    blockDim_z_1 = 1;
    unsigned int threadIdx_z_1;
    threadIdx_z_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128;
    for (int i = 0; i < iter13; i++) {
        uint32_t nonce14;
        nonce14 = (blockDim_x_1 * blockIdx.x + threadIdx_x_1) * iter13 + i + startNonce10;
        static uint64_t s_target15 __attribute__((shared));
        if (!threadIdx_x_1)
            s_target15 = devectorize(target212);
        uint64_t m16[16];
        m16[0] = d_data2[0];
        m16[1] = d_data2[1];
        m16[2] = d_data2[2];
        m16[3] = d_data2[3];
        m16[4] = d_data2[4] | nonce14;
        m16[5] = d_data2[5];
        m16[6] = d_data2[6];
        m16[7] = d_data2[7];
        m16[8] = d_data2[8];
        m16[9] = d_data2[9];
        m16[10] = m16[11] = 0;
        m16[12] = m16[13] = m16[14] = m16[15] = 0;
        uint64_t v17[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
        G(0, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(0, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(0, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(0, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(0, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(0, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(0, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(0, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(1, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(1, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(1, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(1, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(1, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(1, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(1, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(1, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(2, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(2, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(2, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(2, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(2, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(2, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(2, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(2, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(3, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(3, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(3, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(3, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(3, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(3, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(3, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(3, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(4, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(4, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(4, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(4, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(4, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(4, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(4, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(4, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(5, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(5, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(5, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(5, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(5, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(5, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(5, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(5, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(6, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(6, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(6, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(6, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(6, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(6, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(6, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(6, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(7, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(7, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(7, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(7, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(7, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(7, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(7, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(7, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(8, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(8, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(8, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(8, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(8, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(8, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(8, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(8, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(9, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(9, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(9, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(9, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(9, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(9, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(9, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(9, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(10, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(10, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(10, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(10, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(10, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(10, 5, v17[1], v17[6], v17[11], v17[12], m16);
        G(10, 6, v17[2], v17[7], v17[8], v17[13], m16);
        G(10, 7, v17[3], v17[4], v17[9], v17[14], m16);
        ;
        G(11, 0, v17[0], v17[4], v17[8], v17[12], m16);
        G(11, 1, v17[1], v17[5], v17[9], v17[13], m16);
        G(11, 2, v17[2], v17[6], v17[10], v17[14], m16);
        G(11, 3, v17[3], v17[7], v17[11], v17[15], m16);
        G(11, 4, v17[0], v17[5], v17[10], v17[15], m16);
        G(11, 5, v17[1], v17[6], v17[11], v17[12], m16);
        H(11, 6, v17[2], v17[7], v17[8], v17[13], m16);
        ;
        uint64_t h6418;
        h6418 = cuda_swab64(7640891576939301160L ^ v17[0] ^ v17[8]);
        if (h6418 <= s_target15) {
            resNonce11[1] = resNonce11[0];
            resNonce11[0] = nonce14;
            s_target15 = h6418;
        }
    }
}
}
 __global__ __launch_bounds__(256, 0) void blake2b_gpu_hash_sia_blake2b_gpu_hash_fused_kernel_hfuse_idx_0(const uint32_t threads0, const uint32_t startNonce1, uint32_t *resNonce2, const uint2 target23, uint32_t iter4, const uint32_t threads9, const uint32_t startNonce10, uint32_t *resNonce11, const uint2 target212, uint32_t iter13)
 {
if (!((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=0 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 128)) goto label_4;
unsigned int blockDim_x_0;
blockDim_x_0 = 128;
unsigned int threadIdx_x_0;
threadIdx_x_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) % 128;
unsigned int blockDim_y_0;
blockDim_y_0 = 1;
unsigned int threadIdx_y_0;
threadIdx_y_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128 % 1;
unsigned int blockDim_z_0;
blockDim_z_0 = 1;
unsigned int threadIdx_z_0;
threadIdx_z_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128;
for (int i = 0; i < iter4; i++) {
    uint32_t nonce5;
    nonce5 = (blockDim_x_0 * blockIdx.x + threadIdx_x_0) * iter4 + i + startNonce1;
    uint64_t m6[16];
    m6[0] = d_blake_data[0];
    m6[1] = d_blake_data[1];
    m6[2] = d_blake_data[2];
    m6[3] = d_blake_data[3];
    m6[4] = d_blake_data[4];
    m6[5] = d_blake_data[5];
    m6[6] = d_blake_data[6];
    m6[7] = d_blake_data[7];
    m6[8] = d_blake_data[8];
    ((uint32_t *)m6)[18] = *((uint32_t *)(&d_blake_data[9]));
    ((uint32_t *)m6)[19] = nonce5;
    m6[10] = m6[11] = 0;
    m6[12] = m6[13] = 0;
    m6[14] = m6[15] = 0;
    uint64_t v7[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
    G_b(0, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(0, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(0, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(0, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(0, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(0, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(0, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(0, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(1, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(1, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(1, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(1, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(1, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(1, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(1, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(1, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(2, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(2, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(2, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(2, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(2, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(2, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(2, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(2, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(3, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(3, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(3, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(3, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(3, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(3, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(3, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(3, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(4, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(4, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(4, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(4, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(4, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(4, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(4, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(4, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(5, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(5, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(5, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(5, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(5, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(5, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(5, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(5, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(6, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(6, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(6, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(6, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(6, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(6, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(6, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(6, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(7, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(7, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(7, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(7, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(7, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(7, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(7, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(7, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(8, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(8, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(8, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(8, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(8, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(8, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(8, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(8, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(9, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(9, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(9, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(9, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(9, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(9, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(9, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(9, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(10, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(10, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(10, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(10, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(10, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(10, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(10, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(10, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(11, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(11, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(11, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(11, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(11, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(11, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(11, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(11, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    uint2 last8;
    last8 = vectorize(v7[3] ^ v7[11] ^ 11912009170470909681UL);
    if (last8.y <= target23.y && last8.x <= target23.x) {
        resNonce2[1] = resNonce2[0];
        resNonce2[0] = nonce5;
    }
}
label_4:;
if (!((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=128 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 256)) goto label_5;
unsigned int blockDim_x_1;
blockDim_x_1 = 128;
unsigned int threadIdx_x_1;
threadIdx_x_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 128) % 128;
unsigned int blockDim_y_1;
blockDim_y_1 = 1;
unsigned int threadIdx_y_1;
threadIdx_y_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 128) / 128 % 1;
unsigned int blockDim_z_1;
blockDim_z_1 = 1;
unsigned int threadIdx_z_1;
threadIdx_z_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 128) / 128;
for (int i = 0; i < iter13; i++) {
    uint32_t nonce14;
    nonce14 = (blockDim_x_1 * blockIdx.x + threadIdx_x_1) * iter13 + i + startNonce10;
    static uint64_t s_target15 __attribute__((shared));
    if (!threadIdx_x_1)
        s_target15 = devectorize(target212);
    uint64_t m16[16];
    m16[0] = d_data2[0];
    m16[1] = d_data2[1];
    m16[2] = d_data2[2];
    m16[3] = d_data2[3];
    m16[4] = d_data2[4] | nonce14;
    m16[5] = d_data2[5];
    m16[6] = d_data2[6];
    m16[7] = d_data2[7];
    m16[8] = d_data2[8];
    m16[9] = d_data2[9];
    m16[10] = m16[11] = 0;
    m16[12] = m16[13] = m16[14] = m16[15] = 0;
    uint64_t v17[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
    G(0, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(0, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(0, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(0, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(0, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(0, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(0, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(0, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(1, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(1, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(1, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(1, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(1, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(1, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(1, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(1, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(2, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(2, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(2, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(2, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(2, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(2, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(2, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(2, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(3, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(3, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(3, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(3, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(3, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(3, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(3, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(3, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(4, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(4, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(4, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(4, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(4, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(4, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(4, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(4, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(5, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(5, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(5, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(5, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(5, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(5, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(5, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(5, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(6, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(6, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(6, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(6, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(6, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(6, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(6, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(6, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(7, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(7, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(7, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(7, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(7, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(7, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(7, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(7, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(8, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(8, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(8, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(8, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(8, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(8, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(8, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(8, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(9, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(9, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(9, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(9, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(9, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(9, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(9, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(9, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(10, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(10, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(10, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(10, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(10, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(10, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(10, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(10, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(11, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(11, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(11, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(11, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(11, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(11, 5, v17[1], v17[6], v17[11], v17[12], m16);
    H(11, 6, v17[2], v17[7], v17[8], v17[13], m16);
    ;
    uint64_t h6418;
    h6418 = cuda_swab64(7640891576939301160L ^ v17[0] ^ v17[8]);
    if (h6418 <= s_target15) {
        resNonce11[1] = resNonce11[0];
        resNonce11[0] = nonce14;
        s_target15 = h6418;
    }
}
label_5:;
}
 __global__ __launch_bounds__(256, 8) void blake2b_gpu_hash_sia_blake2b_gpu_hash_fused_kernel_hfuse_lb_idx_0(const uint32_t threads0, const uint32_t startNonce1, uint32_t *resNonce2, const uint2 target23, uint32_t iter4, const uint32_t threads9, const uint32_t startNonce10, uint32_t *resNonce11, const uint2 target212, uint32_t iter13)
 {
if (!((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=0 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 128)) goto label_6;
unsigned int blockDim_x_0;
blockDim_x_0 = 128;
unsigned int threadIdx_x_0;
threadIdx_x_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) % 128;
unsigned int blockDim_y_0;
blockDim_y_0 = 1;
unsigned int threadIdx_y_0;
threadIdx_y_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128 % 1;
unsigned int blockDim_z_0;
blockDim_z_0 = 1;
unsigned int threadIdx_z_0;
threadIdx_z_0 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 0) / 128;
for (int i = 0; i < iter4; i++) {
    uint32_t nonce5;
    nonce5 = (blockDim_x_0 * blockIdx.x + threadIdx_x_0) * iter4 + i + startNonce1;
    uint64_t m6[16];
    m6[0] = d_blake_data[0];
    m6[1] = d_blake_data[1];
    m6[2] = d_blake_data[2];
    m6[3] = d_blake_data[3];
    m6[4] = d_blake_data[4];
    m6[5] = d_blake_data[5];
    m6[6] = d_blake_data[6];
    m6[7] = d_blake_data[7];
    m6[8] = d_blake_data[8];
    ((uint32_t *)m6)[18] = *((uint32_t *)(&d_blake_data[9]));
    ((uint32_t *)m6)[19] = nonce5;
    m6[10] = m6[11] = 0;
    m6[12] = m6[13] = 0;
    m6[14] = m6[15] = 0;
    uint64_t v7[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
    G_b(0, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(0, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(0, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(0, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(0, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(0, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(0, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(0, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(1, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(1, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(1, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(1, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(1, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(1, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(1, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(1, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(2, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(2, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(2, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(2, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(2, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(2, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(2, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(2, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(3, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(3, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(3, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(3, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(3, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(3, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(3, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(3, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(4, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(4, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(4, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(4, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(4, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(4, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(4, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(4, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(5, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(5, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(5, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(5, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(5, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(5, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(5, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(5, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(6, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(6, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(6, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(6, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(6, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(6, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(6, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(6, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(7, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(7, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(7, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(7, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(7, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(7, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(7, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(7, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(8, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(8, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(8, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(8, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(8, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(8, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(8, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(8, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(9, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(9, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(9, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(9, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(9, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(9, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(9, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(9, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(10, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(10, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(10, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(10, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(10, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(10, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(10, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(10, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    G_b(11, 0, v7[0], v7[4], v7[8], v7[12], m6);
    G_b(11, 1, v7[1], v7[5], v7[9], v7[13], m6);
    G_b(11, 2, v7[2], v7[6], v7[10], v7[14], m6);
    G_b(11, 3, v7[3], v7[7], v7[11], v7[15], m6);
    G_b(11, 4, v7[0], v7[5], v7[10], v7[15], m6);
    G_b(11, 5, v7[1], v7[6], v7[11], v7[12], m6);
    G_b(11, 6, v7[2], v7[7], v7[8], v7[13], m6);
    G_b(11, 7, v7[3], v7[4], v7[9], v7[14], m6);
    ;
    uint2 last8;
    last8 = vectorize(v7[3] ^ v7[11] ^ 11912009170470909681UL);
    if (last8.y <= target23.y && last8.x <= target23.x) {
        resNonce2[1] = resNonce2[0];
        resNonce2[0] = nonce5;
    }
}
label_6:;
if (!((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y)>=128 && (threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) < 256)) goto label_7;
unsigned int blockDim_x_1;
blockDim_x_1 = 128;
unsigned int threadIdx_x_1;
threadIdx_x_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 128) % 128;
unsigned int blockDim_y_1;
blockDim_y_1 = 1;
unsigned int threadIdx_y_1;
threadIdx_y_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 128) / 128 % 1;
unsigned int blockDim_z_1;
blockDim_z_1 = 1;
unsigned int threadIdx_z_1;
threadIdx_z_1 = ((threadIdx.x + threadIdx.y * blockDim.x + threadIdx.z * blockDim.x * blockDim.y) - 128) / 128;
for (int i = 0; i < iter13; i++) {
    uint32_t nonce14;
    nonce14 = (blockDim_x_1 * blockIdx.x + threadIdx_x_1) * iter13 + i + startNonce10;
    static uint64_t s_target15 __attribute__((shared));
    if (!threadIdx_x_1)
        s_target15 = devectorize(target212);
    uint64_t m16[16];
    m16[0] = d_data2[0];
    m16[1] = d_data2[1];
    m16[2] = d_data2[2];
    m16[3] = d_data2[3];
    m16[4] = d_data2[4] | nonce14;
    m16[5] = d_data2[5];
    m16[6] = d_data2[6];
    m16[7] = d_data2[7];
    m16[8] = d_data2[8];
    m16[9] = d_data2[9];
    m16[10] = m16[11] = 0;
    m16[12] = m16[13] = m16[14] = m16[15] = 0;
    uint64_t v17[16] = {7640891576939301160L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001361L, 11170449401992604703UL, 2270897969802886507L, 6620516959819538809L, 7640891576956012808L, 13503953896175478587UL, 4354685564936845355L, 11912009170470909681UL, 5840696475078001281L, 11170449401992604703UL, 16175846103906665108UL, 6620516959819538809L};
    G(0, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(0, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(0, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(0, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(0, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(0, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(0, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(0, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(1, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(1, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(1, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(1, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(1, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(1, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(1, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(1, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(2, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(2, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(2, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(2, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(2, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(2, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(2, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(2, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(3, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(3, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(3, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(3, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(3, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(3, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(3, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(3, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(4, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(4, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(4, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(4, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(4, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(4, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(4, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(4, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(5, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(5, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(5, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(5, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(5, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(5, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(5, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(5, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(6, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(6, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(6, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(6, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(6, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(6, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(6, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(6, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(7, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(7, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(7, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(7, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(7, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(7, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(7, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(7, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(8, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(8, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(8, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(8, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(8, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(8, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(8, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(8, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(9, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(9, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(9, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(9, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(9, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(9, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(9, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(9, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(10, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(10, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(10, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(10, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(10, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(10, 5, v17[1], v17[6], v17[11], v17[12], m16);
    G(10, 6, v17[2], v17[7], v17[8], v17[13], m16);
    G(10, 7, v17[3], v17[4], v17[9], v17[14], m16);
    ;
    G(11, 0, v17[0], v17[4], v17[8], v17[12], m16);
    G(11, 1, v17[1], v17[5], v17[9], v17[13], m16);
    G(11, 2, v17[2], v17[6], v17[10], v17[14], m16);
    G(11, 3, v17[3], v17[7], v17[11], v17[15], m16);
    G(11, 4, v17[0], v17[5], v17[10], v17[15], m16);
    G(11, 5, v17[1], v17[6], v17[11], v17[12], m16);
    H(11, 6, v17[2], v17[7], v17[8], v17[13], m16);
    ;
    uint64_t h6418;
    h6418 = cuda_swab64(7640891576939301160L ^ v17[0] ^ v17[8]);
    if (h6418 <= s_target15) {
        resNonce11[1] = resNonce11[0];
        resNonce11[0] = nonce14;
        s_target15 = h6418;
    }
}
label_7:;
}
